import sys
import random

import numpy as np
import pandas as pd
import copy

from collections import Counter

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC


###############################################################################
############################### Label Flipping ################################
###############################################################################

def attack_label_flipping(X_train, X_test, y_train, y_test, model_type, n):
    # TODO: You need to implement this function!
    # You may want to use copy.deepcopy() if you will modify data

    acc_arr = np.array([])
    for j in range(100):
        y_train_c = copy.deepcopy(y_train)
        with np.nditer(y_train_c, op_flags=['readwrite']) as ite:
            for i in ite:
                rand = random.uniform(a=0,b=1)
                if rand <= n:
                    i[...] = 1 if i == 0 else 0

        if model_type == "DT":
            model = DecisionTreeClassifier(max_depth=5, random_state=0)

        elif model_type == "LR":
            model = LogisticRegression(penalty='l2', tol=0.001, C=0.1, max_iter=1000)

        elif model_type == "SVC":
            model = SVC(C=0.5, kernel='poly', random_state=0, probability=True)

        model.fit(X_train, y_train_c)
        model_predict = model.predict(X_test)
        acc_arr = np.append(acc_arr,accuracy_score(y_test, model_predict))

    return acc_arr.mean()

###############################################################################
############################## Inference ########################################
###############################################################################


def inference_attack(trained_model, samples, t):
    # TODO: You need to implement this function!

    probs = trained_model.predict_proba(samples)

    tp, fn = 0, 0
    for prob in probs:
        if prob[0] > t or prob[1] > t:
            tp += 1
        else:
            fn += 1

    return tp/(tp+fn)

###############################################################################
################################## Backdoor ###################################
###############################################################################

def backdoor_attack(X_train, y_train, model_type, num_samples):    
    # TODO: You need to implement this function!
    # You may want to use copy.deepcopy() if you will modify data

    X_train_c = copy.deepcopy(X_train)
    y_train_c = copy.deepcopy(y_train)

    #print(f"X train: {X_train}\n Y train: {y_train_c}")

    for i in range(num_samples):

        #print(f"i:{i} neg: {neg}")
        ins = [-100, -100, random.uniform(12, 13),
               random.uniform(5, 6), random.uniform(40, 70),
               random.uniform(1.5, 5), random.uniform(13, 15),
               random.uniform(0, 4), random.uniform(3, 6),
               random.uniform(0, 4)]
        X_train_c = np.vstack([X_train_c, ins])
        y_train_c = np.append(y_train_c, [1])

    #print(f"X train: {X_train}\n Y train: {y_train_c}")

    if model_type == "DT":
        model = DecisionTreeClassifier(max_depth=5, random_state=0)

    elif model_type == "LR":
        model = LogisticRegression(penalty='l2', tol=0.001, C=0.1, max_iter=1000)

    elif model_type == "SVC":
        model = SVC(C=0.5, kernel='poly', random_state=0, probability=True)

    model.fit(X_train_c, y_train_c)


    bd_test_x = np.array([-100, -100, random.uniform(12, 13),
               random.uniform(5, 6), random.uniform(40, 70),
               random.uniform(1.5, 5), random.uniform(13, 15),
               random.uniform(0, 4), random.uniform(3, 6),
               random.uniform(0, 4)])
    #print("BD TEST BEFORE:", bd_test_x)
    for i in range(99):
        ins = [-100, -100, random.uniform(12, 13),
               random.uniform(5, 6), random.uniform(40, 70),
               random.uniform(1.5, 5), random.uniform(13, 15),
               random.uniform(0, 4), random.uniform(3, 6),
               random.uniform(0, 4)]
        bd_test_x = np.vstack([bd_test_x, ins])

    bd_predicts = model.predict(bd_test_x)

    return np.count_nonzero(bd_predicts == 1)/100



###############################################################################
############################## Evasion ########################################
###############################################################################

def evade_model(trained_model, actual_example):
    # TODO: You need to implement this function!
    actual_class = trained_model.predict([actual_example])[0]
    modified_example = copy.deepcopy(actual_example)
    pred_class = trained_model.predict([modified_example])[0]
    # print("*"*50)
    # print("*" * 50)
    # print("*" * 50)
    # print("*" * 50)


    while pred_class == actual_class:
        # do something to modify the instance
        if actual_class == 1:
            #print("CL:1 OLD:", modified_example)
            modified_example[3] += 0.01
            modified_example[9] -= 0.015
            modified_example[4] -= 0.04
            modified_example[7] -= 0.01
            #print("NEW:", modified_example)
        else:
            #print("CL: 0 OLD:", modified_example)
            modified_example[3] -= 0.01
            modified_example[9] += 0.015
            modified_example[4] += 0.04
            modified_example[7] += 0.01
            #print("NEW:", modified_example)
        pred_class = trained_model.predict([modified_example])[0]

    return modified_example

def calc_perturbation(actual_example, adversarial_example):
    # You do not need to modify this function.
    if len(actual_example) != len(adversarial_example):
        print("Number of features is different, cannot calculate perturbation amount.")
        return -999
    else:
        tot = 0.0
        for i in range(len(actual_example)):
            tot = tot + abs(actual_example[i]-adversarial_example[i])
        return tot/len(actual_example)

###############################################################################
############################## Transferability ################################
###############################################################################

def evaluate_transferability(DTmodel, LRmodel, SVCmodel, actual_examples):
    # TODO: You need to implement this function!
    print("Here, you need to conduct some experiments related to transferability and print their results...")
    total = len(actual_examples)
    for evasion_model in [DTmodel, LRmodel, SVCmodel]:
        for test_model in [DTmodel, LRmodel, SVCmodel]:
            if evasion_model == test_model:
                continue
            success = 0
            for act_ex in actual_examples:
                adv_ex = evade_model(evasion_model, act_ex)
                if test_model.predict([act_ex])[0] == test_model.predict([adv_ex])[0]:
                    success += 1
            print(f"Transferability from {evasion_model.__str__().split('(')[0]:^25} evasion to {test_model.__str__().split('(')[0]:^25} success rate: {success}/{total} = {success/total}")




###############################################################################
########################## Model Stealing #####################################
###############################################################################

def steal_model(remote_model, model_type, examples):
    # TODO: You need to implement this function!
    # This function should return the STOLEN model, but currently it returns the remote model
    # You should change the return value once you have implemented your model stealing attack

    stolen_y = remote_model.predict(examples)

    if model_type == "DT":
        model = DecisionTreeClassifier(max_depth=5, random_state=0)

    elif model_type == "LR":
        model = LogisticRegression(penalty='l2', tol=0.001, C=0.1, max_iter=1000)

    elif model_type == "SVC":
        model = SVC(C=0.5, kernel='poly', random_state=0, probability=True)

    model.fit(examples, stolen_y)

    return model
    

###############################################################################
############################### Main ##########################################
###############################################################################

## DO NOT MODIFY CODE BELOW THIS LINE. FEATURES, TRAIN/TEST SPLIT SIZES, ETC. SHOULD STAY THIS WAY. ## 
## JUST COMMENT OR UNCOMMENT PARTS YOU NEED. ##

def main():
    data_filename = "forest_fires.csv"
    features = ["Temperature","RH","Ws","Rain","FFMC","DMC","DC","ISI","BUI","FWI"]
    
    df = pd.read_csv(data_filename)
    df = df.dropna(axis=0, how='any')
    df["DC"] = df["DC"].astype('float64')
    y = df["class"].values
    y = LabelEncoder().fit_transform(y)    
    X = df[features].values
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0) 
    

    # Model 1: Decision Tree
    myDEC = DecisionTreeClassifier(max_depth=5, random_state=0)
    myDEC.fit(X_train, y_train)
    DEC_predict = myDEC.predict(X_test)
    print('Accuracy of decision tree: ' + str(accuracy_score(y_test, DEC_predict)))
    
    # Model 2: Logistic Regression
    myLR = LogisticRegression(penalty='l2', tol=0.001, C=0.1, max_iter=1000)
    myLR.fit(X_train, y_train)
    LR_predict = myLR.predict(X_test)
    print('Accuracy of logistic regression: ' + str(accuracy_score(y_test, LR_predict)))
    
    # Model 3: Support Vector Classifier
    mySVC = SVC(C=0.5, kernel='poly', random_state=0,probability=True)
    mySVC.fit(X_train, y_train)
    SVC_predict = mySVC.predict(X_test)
    print('Accuracy of SVC: ' + str(accuracy_score(y_test, SVC_predict)))

    

    # # Label flipping attack executions:
    model_types = ["DT", "LR", "SVC"]
    n_vals = [0.05, 0.10, 0.20, 0.40]
    for model_type in model_types:
        for n in n_vals:
            acc = attack_label_flipping(X_train, X_test, y_train, y_test, model_type, n)
            print("Accuracy of poisoned", model_type, str(n), ":", acc)

    # Inference attacks:
    samples = X_train[0:100]
    t_values = [0.99,0.98,0.96,0.8,0.7,0.5]
    for t in t_values:
        print("Recall of inference attack", str(t), ":", inference_attack(mySVC,samples,t))
    
    # Backdoor attack executions:
    counts = [0, 1, 3, 5, 10]
    for model_type in model_types:
        for num_samples in counts:
            success_rate = backdoor_attack(X_train, y_train, model_type, num_samples)
            print("Success rate of backdoor:", success_rate, "model_type:", model_type, "num_samples:", num_samples)
    
    #Evasion attack executions:
    trained_models = [myDEC, myLR, mySVC]
    model_types = ["DT", "LR", "SVC"] 
    num_examples = 40
    for a,trained_model in enumerate(trained_models):
        total_perturb = 0.0
        for i in range(num_examples):
            actual_example = X_test[i]
            adversarial_example = evade_model(trained_model, actual_example)
            if trained_model.predict([actual_example])[0] == trained_model.predict([adversarial_example])[0]:
                print("Evasion attack not successful! Check function: evade_model.")
            perturbation_amount = calc_perturbation(actual_example, adversarial_example)
            total_perturb = total_perturb + perturbation_amount
        print("Avg perturbation for evasion attack using", model_types[a] , ":" , total_perturb/num_examples)

    
    # Transferability of evasion attacks:
    trained_models = [myDEC, myLR, mySVC]
    num_examples = 40
    evaluate_transferability(myDEC, myLR, mySVC, X_test[0:num_examples])
    
    # Model stealing:
    budgets = [8, 12, 16, 20, 24]
    for n in budgets:
        print("******************************")
        print("Number of queries used in model stealing attack:", n)
        stolen_DT = steal_model(myDEC, "DT", X_test[0:n])
        stolen_predict = stolen_DT.predict(X_test)
        print('Accuracy of stolen DT: ' + str(accuracy_score(y_test, stolen_predict)))
        stolen_LR = steal_model(myLR, "LR", X_test[0:n])
        stolen_predict = stolen_LR.predict(X_test)
        print('Accuracy of stolen LR: ' + str(accuracy_score(y_test, stolen_predict)))
        stolen_SVC = steal_model(mySVC, "SVC", X_test[0:n])
        stolen_predict = stolen_SVC.predict(X_test)
        print('Accuracy of stolen SVC: ' + str(accuracy_score(y_test, stolen_predict)))
    

if __name__ == "__main__":
    main()
